#!/bin/bash
#
# Copyright (C) 2016 The CyanogenMod Project
# Copyright (C) 2017-2022 The LineageOS Project
#
# SPDX-License-Identifier: Apache-2.0
#
# Corrected version for on-device use with proper path handling.
#

function blob_fixup() {
    # This function can be used later to patch specific blobs if needed
    case "${1}" in
        # Example:
        # lib/libsomelibrary.so)
        #    "${PATCHELF}" --remove-needed libanotherlibrary.so "${2}"
        #    ;;
    esac
}

function setup_vendor() {
    DEVICE="$1"
    VENDOR="$2"
    LINEAGE_ROOT="$3" # Root relative to device tree (~/../../.. usually)
    VENDOR_ROOT_ABS="${HOME}/vendor/${VENDOR}/${DEVICE}" # Absolute path to extracted blobs

    IS_COMMON=false # Assume not common for this setup
    if [ "$4" == "true" ]; then IS_COMMON=true; fi

    CLEANUP=true # Default cleanup based on flag passed
    if [ "$5" == "false" ]; then CLEANUP=false; fi

    # Define the directory where makefiles will be generated (relative path for build system)
    VENDOR_DIR_MAKEFILES="${LINEAGE_ROOT}/vendor/${VENDOR}/${DEVICE}"

    # Cleanup the makefile directory ONLY if requested and it exists
    if ${CLEANUP} && [ -d "${VENDOR_DIR_MAKEFILES}" ]; then
        echo "Cleaning up the old vendor makefile folder: ${VENDOR_DIR_MAKEFILES}"
        # Only remove makefiles, not the blob dir which is vendor_ROOT_ABS
        rm -f "${VENDOR_DIR_MAKEFILES}"/*.mk
    fi

    echo "Setting up the vendor makefile folder at ${VENDOR_DIR_MAKEFILES}"
    mkdir -p "${VENDOR_DIR_MAKEFILES}"

    echo "Creating the makefiles"
    (
        cat << EOF
#
# Copyright (C) 2025 The LineageOS Project
#
# SPDX-License-Identifier: Apache-2.0
#

# This file is generated by device/${VENDOR}/${DEVICE}/setup-makefiles.sh

# List all proprietary files copied from proprietary-files.txt
PRODUCT_COPY_FILES += \\
EOF
        # Reads proprietary-files.txt, generates correct source and destination paths for PRODUCT_COPY_FILES
        awk -v vendor="${VENDOR}" -v device="${DEVICE}" '!/^#|^ *$/{
            # Default source and destination are the same relative path from root
            src=$1; dst=$1;
            
            # Handle source:destination format
            if ($0 ~ /:/) {
                src=substr($1, 0, index($1,":")-1);
                dst=substr($1, index($1,":")+1);
            }
            
            # Translate makefile destination variables
            dst_final=dst; # Keep original destination structure
            gsub(/\$\(TARGET_COPY_OUT_VENDOR\)/,"vendor",dst_final);
            gsub(/\$\(TARGET_COPY_OUT_ODM\)/,"odm",dst_final);
            gsub(/\$\(TARGET_COPY_OUT_PRODUCT\)/,"product",dst_final); # Use product partition for my_*

            # Source path relative to top of source tree (where blobs were extracted)
            # This correctly reflects the nested structure e.g. vendor/oneplus/udon/vendor/bin/file
            src_path_in_tree="vendor/" vendor "/" device "/" src;

            # Destination path using Makefile variables relative to device root
            # Convert vendor/bin/file -> $(TARGET_COPY_OUT_VENDOR)/bin/file etc.
            if (dst_final ~ /^vendor\//) {
                 dst_path_on_device="\$(TARGET_COPY_OUT_VENDOR)/" substr(dst_final, 8);
            } else if (dst_final ~ /^odm\//) {
                 dst_path_on_device="\$(TARGET_COPY_OUT_ODM)/" substr(dst_final, 5);
            } else if (dst_final ~ /^product\//) {
                 dst_path_on_device="\$(TARGET_COPY_OUT_PRODUCT)/" substr(dst_final, 9);
            } else if (dst_final ~ /^system\/vendor\//) {
                 dst_path_on_device="\$(TARGET_COPY_OUT_VENDOR)/" substr(dst_final, 15);
            } else if (dst_final ~ /^system_ext\//) {
                 dst_path_on_device="\$(TARGET_COPY_OUT_SYSTEM_EXT)/" substr(dst_final, 12);
            } else if (dst_final ~ /^system\//) {
                 dst_path_on_device="\$(TARGET_COPY_OUT_SYSTEM)/" substr(dst_final, 8); # Less common for blobs
            } else {
                 # Fallback for paths without clear partition (might need adjustment)
                 dst_path_on_device=dst_final;
            }

            # Handle directory copies specially if needed (usually handled by Soong/Android.bp now)
            if (src ~ /\/$/) {
                print "# Directory copy specified, ensure Android.bp handles prebuilt_etc or similar: " src_path_in_tree;
            } else {
                # Format the output line: source (relative to tree top) : destination (using make variable)
                print "    " src_path_in_tree ":" dst_path_on_device " \\\\";
            }

        }' "${MY_DIR}/proprietary-files.txt" >> "${VENDOR_DIR_MAKEFILES}/device-vendor.mk"

        # Remove the trailing backslash from the last generated PRODUCT_COPY_FILES line
        sed -i '$ s/ \\$//' "${VENDOR_DIR_MAKEFILES}/device-vendor.mk"

        cat << EOF

# Add Soong namespace for Android.bp files (if any are generated/used later)
PRODUCT_SOONG_NAMESPACES += \\
    vendor/${VENDOR}/${DEVICE}
EOF
    ) >> "${VENDOR_DIR_MAKEFILES}/device-vendor.mk"
    (
        cat << EOF
#
# Copyright (C) 2025 The LineageOS Project
#
# SPDX-License-Identifier: Apache-2.0
#

# This file is generated by device/${VENDOR}/${DEVICE}/setup-makefiles.sh
# It should list packages built from source needed by blobs.
# Keep this blank for now unless specific dependencies are identified.
# PRODUCT_PACKAGES += \\

EOF
    ) > "${VENDOR_DIR_MAKEFILES}/${DEVICE}-vendor-packages.mk"
    (
        cat << EOF
#
# Copyright (C) 2025 The LineageOS Project
#
# SPDX-License-Identifier: Apache-2.0
#

# This file is generated by device/${VENDOR}/${DEVICE}/setup-makefiles.sh
# It is used for blobs handled by Soong via Android.bp generation.
# Keep this blank if manually handling via PRODUCT_COPY_FILES.
# SOONG_BLOBS := \\

# SOONG_CONFIG_NAMESPACES += vendor/${VENDOR}/${DEVICE}
# SOONG_CONFIG_vendor_${VENDOR}_${DEVICE}_BLOBS := \$(SOONG_BLOBS)
EOF
    ) > "${VENDOR_DIR_MAKEFILES}/proprietary-blobs.mk" # Kept blank
    (
        cat << EOF
#
# Copyright (C) 2025 The LineageOS Project
#
# SPDX-License-Identifier: Apache-2.0
#

# This file is generated by device/${VENDOR}/${DEVICE}/setup-makefiles.sh

# This is the top-level vendor makefile.
LOCAL_PATH := \$(call my-dir)

# Include proprietary files makefile
include \$(CLEAR_VARS)
include \$(LOCAL_PATH)/device-vendor.mk

# Include further build rules for vendor libs/apps if needed later
# Example: include $(call all-makefiles-under,$(LOCAL_PATH))
EOF
    ) > "${VENDOR_DIR_MAKEFILES}/Android.mk"
    (
        cat << EOF
#
# Copyright (C) 2025 The LineageOS Project
#
# SPDX-License-Identifier: Apache-2.0
#

# This file is generated by device/${VENDOR}/${DEVICE}/setup-makefiles.sh
# This is the main file included by the device makefile.

# Inherit from device-vendor.mk (which lists PRODUCT_COPY_FILES)
\$(call inherit-product, vendor/${VENDOR}/${DEVICE}/device-vendor.mk)

# Inherit from vendor-packages.mk (blank for now)
\$(call inherit-product, vendor/${VENDOR}/${DEVICE}/${DEVICE}-vendor-packages.mk)

# Inherit from proprietary-blobs.mk (blank for now)
\$(call inherit-product, vendor/${VENDOR}/${DEVICE}/proprietary-blobs.mk)
EOF
    ) > "${VENDOR_DIR_MAKEFILES}/${DEVICE}-vendor.mk"
    (
        cat << EOF
#
# Copyright (C) 2025 The LineageOS Project
#
# SPDX-License-Identifier: Apache-2.0
#

# This file is generated by device/${VENDOR}/${DEVICE}/setup-makefiles.sh
# Included by BoardConfig.mk

BOARD_VENDOR := ${VENDOR}

# Declare that vendor blobs are prebuilt
TARGET_SKIP_VENDOR_BUILD := true

# Include the main vendor makefile
\$(call inherit-product, vendor/${VENDOR}/${DEVICE}/${DEVICE}-vendor.mk)
EOF
    ) > "${VENDOR_DIR_MAKEFILES}/BoardConfigVendor.mk"
}

# Stub functions for compatibility, extraction is handled elsewhere
function extract() {
    echo "Skipping extract function (handled by extract-files.sh)"
}
function extract_section() {
    echo "Section extraction not implemented."
}

